import logging

import asyncpg

from loader import dp, db
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from keyboards.inline.options import show_categories_buttons, make_order, delete_all_orders


@dp.message_handler(Text(equals="üîç –ö–∞—Ç–∞–ª–æ–≥"))
async def show_categories(message: Message):
    categories = [category['category'] for category in await db.select_all_categories()]
    await message.answer("–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                         reply_markup=await show_categories_buttons(categories))


@dp.message_handler(Text(equals="üßÆ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
async def show_orders(message: Message):
    orders = [
        dict(date=item['date'], quantity=item['quantity'], product_id=item['product_id'],
             sum=item['sum'], buyer=item['buyer'])
        for item in await db.select_user_orders(telegram_id=message.from_user.id)]

    if not orders:
        await message.answer(text="–¢—ã –µ—â–µ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª –Ω–∞—à–∏ –ø–æ–ª–µ–∑–Ω–µ–π—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã üò±\n\n"
                                  "–ù–∞–∂–º–∏ –Ω–∞ 'üîç –ö–∞—Ç–∞–ª–æ–≥' –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ãüòâ")
        return

    count = 1
    order = '–ü–æ–∫—É–ø–∫–∏:\n'
    for item in orders:
        date = item.get("date")
        quantity = item.get("quantity")
        product_id = int(item.get("product_id"))
        ord_sum = item.get("sum")
        buyer = item.get("buyer")

        buyer_name = [dict(name=item['fio']) for item in await db.select_user_name_by_tg_id(buyer)]
        buyer_name = buyer_name[0].get("name")

        product = [dict(name=item['name']) for item in await db.select_product_by_id(product_id)]
        product = product[0].get("name")
        product_flover = [dict(flavour=item['flavour']) for item in await db.select_product_flavour_by_id(product_id)]
        product_flover = product_flover[0].get("flavour")

        order += f'USER: {buyer_name}\n' \
                 f'{count}. üìÖ: {date} | üõí: {product} | üí£: {product_flover} | üõçÔ∏è: {quantity} | üí∞:{ord_sum}\n'
        count += 1
    # await message.answer(text=order)
    await message.answer(text=order,
                         reply_markup=await delete_all_orders())


@dp.callback_query_handler(delete_order_callback.filter(delete="delete"))
async def delete_all_ords(call: CallbackQuery):
    await db.delete_all_user_orders(call.from_user.id)
    await call.message.answer("‚ú® Done")


@dp.message_handler(Text(equals="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞"))
async def show_cart(message: Message, state: FSMContext):
    item_string = "\n"
    total = 0
    cart = (await state.get_data()).get("cart")
    if (cart is None) or (not len(cart)):
        await message.answer(text="üòû–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞üòû\n\n" \
                                  "–ù–∞–∂–º–∏ –Ω–∞ 'üîç –ö–∞—Ç–∞–ª–æ–≥' –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ãüòâ")
        return
    for item in cart:
        total += int(cart[item]['price']) * int(cart[item]['quantity'])
        item_string = "".join([item_string, f"{item}: ",
                               f"{cart[item]['price']} * {cart[item]['quantity']}\n" \
                               f"üòã–í–∫—É—Å: {cart[item]['flavour']}üòã\n" \
                               f"üíµ–ù–∞ —Å—É–º–º—É: {int(cart[item]['price']) * int(cart[item]['quantity'])}üíµ\n\n"])
    txt = f'‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®\n' \
          "–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n" \
          f"{item_string}\n" \
          f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: üí≤{total}\n" \
          "‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®\n"
    await message.answer(text=txt, reply_markup=await make_order())
